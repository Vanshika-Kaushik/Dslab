#include <stdio.h>
#include <stdlib.h>

struct node {
  int item;
  struct node* left;
  struct node* right;
};

// Create a new Node
struct node* createNode(int value) {
  struct node* newNode = malloc(sizeof(struct node));
  newNode->item = value;
  newNode->left = NULL;
  newNode->right = NULL;
  return newNode;
}

// Insert on the left of the node
struct node* insertLeft(struct node* root, int value) {
  root->left = createNode(value);
  return root->left;
}

// Insert on the right of the node
struct node* insertRight(struct node* root, int value) {
  root->right = createNode(value);
  return root->right;
}

// Inorder traversal: Left -> Root -> Right
void inorderTraversal(struct node* root) {
  if (root != NULL) {
    inorderTraversal(root->left);
    printf("%d ", root->item);
    inorderTraversal(root->right);
  }
}

// Preorder traversal: Root -> Left -> Right
void preorderTraversal(struct node* root) {
  if (root != NULL) {
    printf("%d ", root->item);
    preorderTraversal(root->left);
    preorderTraversal(root->right);
  }
}

// Postorder traversal: Left -> Right -> Root
void postorderTraversal(struct node* root) {
  if (root != NULL) {
    postorderTraversal(root->left);
    postorderTraversal(root->right);
    printf("%d ", root->item);
  }
}

int main() {
  struct node* root = createNode(1);
  insertLeft(root, 2);
  insertRight(root, 3);
  insertLeft(root->left, 4);

  printf("Inorder traversal: ");
  inorderTraversal(root);
  printf("\n");

  printf("Preorder traversal: ");
  preorderTraversal(root);
  printf("\n");

  printf("Postorder traversal: ");
  postorderTraversal(root);
  printf("\n");

  return 0;
}
